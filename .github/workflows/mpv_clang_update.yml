name: mpv clang
defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      command:
        description: 'Run custom command before building'
        required: false
        type: string
      github_release:
        description: 'Upload to Github release'
        required: false
        default: false
        type: boolean
      mpv_tarball:
        description: 'Build latest mpv tarball'
        required: false
        default: false
        type: boolean

jobs:
  build_mpv:
    name: Building mpv
    runs-on: ubuntu-latest
    # 注意：这个 if 条件在手动触发时可能不会正常工作，如果遇到问题可以先删除它
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    strategy:
      fail-fast: false
      matrix:
        bit: [i686, x86_64, x86_64_v3, aarch64]
    env:
      BIT: ${{ matrix.bit }}
    container:
      image: docker://ghcr.io/shinchiro/archlinux:latest
    outputs:
      mpv_ver: ${{ steps.build_mpv_step.outputs.mpv_ver }}
    steps:
      - name: Init variable
        run: |
          if [[ $BIT == "i686" ]]; then
            echo "arch=i686" >> $GITHUB_ENV
          elif [[ $BIT == "x86_64" ]]; then
            echo "arch=x86_64" >> $GITHUB_ENV
          elif [[ $BIT == "x86_64_v3" ]]; then
            echo "arch=x86_64" >> $GITHUB_ENV
            echo "x86_64_level=-v3" >> $GITHUB_ENV
          elif [[ $BIT == "aarch64" ]]; then
            echo "arch=aarch64" >> $GITHUB_ENV
          fi

      - name: Setup git config
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true
          git config --global rebase.autoStash true
          git config --global fetch.prune true
          git config --global --add safe.directory $PWD

      - uses: actions/checkout@main
        with:
          ref: master

      # =================================================================
      # ▼▼▼ 核心改动：从这里开始 ▼▼▼
      # =================================================================
      - name: Download Toolchain Artifact from the latest successful run
        uses: dawidd6/action-download-artifact@v6
        with:
          # 确保这个名字和你的 llvm_clang.yml 的 name 字段完全一致
          workflow: llvm_clang.yml 
          # 你的分支名，通常是 master 或 main
          branch: master
          # 只寻找最近一次“成功”的运行
          workflow_conclusion: success
          # 产物的名字，必须和 llvm_clang.yml 里上传时的一致
          name: toolchain
          # GitHub Token，用于API访问权限
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # (可选) 添加一个验证步骤，确保工具链被正确下载和解压
      - name: Verify downloaded toolchain
        run: |
          echo "Listing contents of the current directory:"
          ls -l
          echo "Listing contents of clang_root/bin:"
          ls -l clang_root/bin
      # =================================================================
      # ▲▲▲ 核心改动：到这里结束 ▲▲▲
      # =================================================================
      
      # 以下三个旧的 cache 步骤已被删除

      - name: Running custom command
        if: ${{ github.event.inputs.command != '' }}
        continue-on-error: true
        run: ${{ github.event.inputs.command }}

      - name: Configuring CMake & Downloading source
        run: |
          if [[ $BIT == x86_64_v3 ]]; then echo "x86_64_v3_ARCH=-DGCC_ARCH=x86-64-v3" >> $GITHUB_ENV; fi
          cmake -DTARGET_ARCH=${{ env.arch }}-w64-mingw32 -DCOMPILER_TOOLCHAIN=clang ${{ env.x86_64_v3_ARCH }} -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DMINGW_INSTALL_PREFIX=$PWD/build_$BIT/$BIT-w64-mingw32 -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/clang_root/install_rustup -DENABLE_CCACHE=ON -DCLANG_PACKAGES_LTO=ON -G Ninja --fresh -B build_$BIT -S $PWD
          ninja -C build_$BIT download || true

      - name: Building mpv
        id: build_mpv_step
        env:
          MPV_TARBALL: ${{ github.event.inputs.mpv_tarball }}
        run: |
          ninja -C build_$BIT update
          ninja -C build_$BIT llvm-copy-builtin
          $MPV_TARBALL && ninja -C build_$BIT mpv-release || ninja -C build_$BIT mpv
          $MPV_TARBALL && echo "mpv_ver=$(cat build_$BIT/packages/mpv-release-prefix/VERSION)" >> $GITHUB_OUTPUT || echo "mpv_ver=UNKNOWN" >> $GITHUB_OUTPUT

      # ... 后续所有步骤保持不变 ...
      - name: Packaging mpv
        run: |
          mkdir -p release_$BIT
          ninja -C build_$BIT mpv-packaging; mv build_$BIT/mpv*.7z release_$BIT
          if [[ $BIT == x86_64_v3 ]]; then for dir in release_$BIT/mpv-*; do name=$(basename $dir); mv $dir $(dirname $dir)/${name/x86_64/x86_64-v3}; done; fi

      - name: Collecting logs
        if: always()
        run: |
          mkdir -p build_${BIT}_logs
          cp -fr $(find build_$BIT -type f -iname "*-*.log" -or -wholename "*/ffbuild/config.log") build_${BIT}_logs || true
          7z a -m0=lzma2 -mx=9 -ms=on logs.7z build*logs

      - name: Uploading logs
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: mpv-${{ matrix.bit }}-logs
          path: logs.7z
          retention-days: 1

      - name: Uploading ${{ matrix.bit }} build
        uses: actions/upload-artifact@master
        with:
          name: mpv-${{ matrix.bit }}
          path: release_${{ matrix.bit }}/mpv-${{ env.arch }}*

      - name: Uploading ${{ matrix.bit }} debug
        uses: actions/upload-artifact@master
        with:
          name: mpv-${{ matrix.bit }}-debug
          path: release_${{ matrix.bit }}/mpv-debug-${{ env.arch }}*

      - name: Cleaning build directory
        if: always()
        run: |
          rm -rf build_$BIT/mpv*
          rm -rf release_$BIT/mpv-debug*.7z

      - name: Cleaning rust toolchain directory
        if: always()
        run: |
          ninja -C build_$BIT cargo-clean

      # 以下 saving cache 的步骤可以保留，也可以删除，它们不会影响本次运行的成功
      # 保留它们可以在未来的运行中可能加速某些步骤，但下载 Artifact 才是成功的关键
      - name: Saving clang sysroot cache
        uses: actions/cache/save@main
        if: ${{ always() && matrix.bit == 'x86_64' }}
        with:
          path: |
            clang_root
          key: ${{ secrets.CACHE_VERSION }}-clang_root-${{ github.run_id }}

      - name: Saving repository cache
        uses: actions/cache/save@main
        if: ${{ always() && matrix.bit == 'x86_64' }}
        with:
          path: src_packages
          key: ${{ secrets.CACHE_VERSION }}-repository-${{ github.run_id }}

      - name: Saving ${{ matrix.bit }} toolchain cache
        uses: actions/cache/save@main
        if: always()
        with:
          path: |
            build_${{ matrix.bit }}
          key: ${{ secrets.CACHE_VERSION }}-clang-${{ matrix.bit }}_toolchain-${{ github.run_id }}

      - name: Saving release_${{ matrix.bit }} cache
        uses: actions/cache/save@main
        with:
          path: release_${{ matrix.bit }}
          key: ${{ secrets.CACHE_VERSION }}-release_${{ matrix.bit }}-${{ github.run_id }}

  release:
    name: Upload releases
    runs-on: ubuntu-latest
    needs: build_mpv
    env:
      GH_TOKEN: ${{ github.token }}
      # ... release job 保持不变 ...
